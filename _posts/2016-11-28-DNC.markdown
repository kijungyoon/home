---
title: "Differentiable Neural Computer"
layout: post
date: 2016-11-28 20:30
headerImage: false
tag:
- RNN
- LSTM
- NTM
- DNC
blog: true
star: false
author: KiJung Yoon
---

Much as a feedforward neural network is to disentangle the spatial features of an input such as an image by approximating some functions, a recurrent neural network (RNN) aims to learn disentangled representations of the temporal features through feedback connections and parameter sharing over time. The vanilla RNN has a caveat of the vanishing gradient problem, and gated RNNs appear as an alternative but the most effective sequence models. The main idea is to create paths in time to prevent back propagated errors from vanishing or exploding. A special variant, called long short-term memory (LSTM) network has been found to be useful in many tasks such as machine translation, voice recognition, and image captioning.

Despite the popularity, RNNs lack the the ability to represent variables and data structures, and to store data over long timescales for solving more complex tasks including reasoning and inference problems. To hurdle the limitations, Graves et al. [[1]](http://www.nature.com/nature/journal/v538/n7626/full/nature20101.html) introduces a differentiable neural computer (DNC), which is an extension of RNNs with an external memory bank that the network can read from and write to. It is broadly considered as augmented RNNs with attention mechanisms [[2]](http://distill.pub/2016/augmented-rnns/#adaptive-computation-time) that would probably accelerate the power of learning machines.

In this post, I will focus on presenting detailed model schematics without making all intelligible because I have yet to find one such thing that visualizes the whole circuit, and there are already many instructive blogs outlining the key ingredients of the model framework. I personally use it as a cheat sheet for neural network models.

The earlier form of DNC is the neural Turing machine (NTM) [[3]](https://arxiv.org/abs/1410.5401) developed by the same authors, and they share a larger part of the architecture. An elementary module of NTM/DNC is LSTM, referred as to a controller because it determines the values of interface parameters that control the memory interactions. Unfolding the recurrent computation, here is the vanilla LSTM:

![Markdowm Image](https://kijungyoon.github.io/assets/images/lstm.png)

Note that the yellow box represents the set of (input/recurrent) weights to be learned for successfully performing a task given a time-varying input $$\mathbf{x}_t$$. Likewise, the controller of NTM is modelled by LSTM with additional sets of weights that determine interface parameters, whereby read-write access to a memory is regulated:

![Markdowm Image](https://kijungyoon.github.io/assets/images/ntm.png)

The first architectural difference of DNC from NTM is that DNC employs multiple read vectors and a deep LSTM although they are not necessary conditions. The qualitative difference is that DNC uses the dynamic memory allocation to ensure that blocks of allocated memory do not overlap and interfere. The new addressing mechanism allows to reuse memory when processing long sequences as opposed to NTM.

![Markdowm Image](https://kijungyoon.github.io/assets/images/dnc.png)


[1] A. Graves, G. Wayne et al.<br>
<a href="https://www.nature.com/nature/journal/v538/n7626/full/nature20101.html" target="_blank">Hybrid computing using a eural network with dynamic external memory.</a><br>
Nature, 2016<br>
[2] C. Olah and S. Carter <br>
<a href="http://distill.pub/2016/augmented-rnns/#adaptive-computation-time" target="_blank">Attention and Augmented Recurrent Neural Networks</a><br>
Distill, 2016<br>
[3] A. Graves, G. Wayne, and I. Danihelka<Br>
<a href="https://arxiv.org/abs/1410.5401" target="_blank">Neural Turing Machines</a><br>
ArXiv, 2014<br>
